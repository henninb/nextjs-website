options:
  # logging: "NONE"
  logging: CLOUD_LOGGING_ONLY # Use CLOUD_LOGGING_ONLY for Cloud Logging or CLOUD_LOGGING_AND_STORAGE to store logs in GCS
steps:
  - name: "gcr.io/cloud-builders/gcloud"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        set -euo pipefail
        echo "Project: $PROJECT_ID"
        echo "Location: $_LOCATION"
        echo "Repository: $_REPOSITORY"
        echo "Ensuring Artifact Registry repo '$_REPOSITORY' exists in '$_LOCATION'..."
        if ! gcloud artifacts repositories describe "$_REPOSITORY" \
          --location "$_LOCATION" \
          --project "$PROJECT_ID" >/dev/null 2>&1; then
          echo "Repository not found. Creating..."
          gcloud artifacts repositories create "$_REPOSITORY" \
            --repository-format=docker \
            --location "$_LOCATION" \
            --description "Docker images for nextjs-website" \
            --project "$PROJECT_ID" || {
              echo "WARN: Failed to create repo (likely missing permissions). Continuing..."
            }
        else
          echo "Repository exists. Continuing..."
        fi
  - name: "gcr.io/cloud-builders/gcloud"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        set -euo pipefail
        echo "Configuring Docker to use gcloud as a credential helper for $_LOCATION-docker.pkg.dev"
        gcloud auth configure-docker "$_LOCATION-docker.pkg.dev" --quiet
  # The build step is now handled in the Dockerfile
  # This ensures API routes are properly available
  - name: "gcr.io/cloud-builders/docker"
    args:
      [
        "build",
        "-t",
        "$_LOCATION-docker.pkg.dev/$PROJECT_ID/$_REPOSITORY/nextjs-website:$COMMIT_SHA",
        ".",
      ]
  - name: "gcr.io/cloud-builders/docker"
    args:
      [
        "push",
        "$_LOCATION-docker.pkg.dev/$PROJECT_ID/$_REPOSITORY/nextjs-website:$COMMIT_SHA",
      ]

  # Deploy to Cloud Run
  - name: "gcr.io/cloud-builders/gcloud"
    args:
      - "run"
      - "deploy"
      - "nextjs-website"
      - "--image"
      - "$_LOCATION-docker.pkg.dev/$PROJECT_ID/$_REPOSITORY/nextjs-website:$COMMIT_SHA"
      - "--region"
      - "$_CLOUD_RUN_REGION"
      - "--platform"
      - "managed"
      - "--allow-unauthenticated"
      - "--port"
      - "3000"
      - "--memory"
      - "1Gi"
      - "--cpu"
      - "1"
      - "--min-instances"
      - "0"
      - "--max-instances"
      - "10"
      - "--set-env-vars"
      - "NODE_ENV=production"
      - "--timeout"
      - "300"

  # Wait for deployment and get service URL
  - name: "gcr.io/cloud-builders/gcloud"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        set -euo pipefail
        echo "Waiting for Cloud Run service to be ready..."
        sleep 10

        # Get the service URL
        SERVICE_URL=$$(gcloud run services describe nextjs-website \
          --region $_CLOUD_RUN_REGION \
          --format='value(status.url)')

        echo "==================================="
        echo "🚀 DEPLOYMENT SUCCESSFUL!"
        echo "==================================="
        echo "Service URL: $$SERVICE_URL"
        echo "Health Check: $$SERVICE_URL/api/health"
        echo "Console: https://console.cloud.google.com/run/detail/$_CLOUD_RUN_REGION/nextjs-website/metrics?project=$PROJECT_ID"
        echo "==================================="

        # Test the health endpoint
        echo "Testing health endpoint..."
        if curl -f -s "$$SERVICE_URL/api/health" > /dev/null; then
          echo "✅ Health check passed"
        else
          echo "⚠️  Health check failed (service may still be starting)"
        fi

  # Print the image tag, digest, and URLs for convenience
  - name: "gcr.io/cloud-builders/docker"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        set -euo pipefail
        IMAGE="$_LOCATION-docker.pkg.dev/$PROJECT_ID/$_REPOSITORY/nextjs-website:$COMMIT_SHA"
        echo "Pushed image tag: $$IMAGE"
        if docker inspect "$$IMAGE" >/dev/null 2>&1; then
          DIGEST=$$(docker inspect --format='{{index .RepoDigests 0}}' "$$IMAGE" || true)
          if [[ -n "$${DIGEST:-}" ]]; then
            echo "Pushed image digest: $$DIGEST"
          fi
        fi
        echo "Artifact Registry URL: https://console.cloud.google.com/artifacts/docker/$PROJECT_ID/$_LOCATION/$_REPOSITORY/nextjs-website?project=$PROJECT_ID"

images:
  - "$_LOCATION-docker.pkg.dev/$PROJECT_ID/$_REPOSITORY/nextjs-website:$COMMIT_SHA"

substitutions:
  _LOCATION: "us"
  _REPOSITORY: "containers"
  _CLOUD_RUN_REGION: "us-central1"
